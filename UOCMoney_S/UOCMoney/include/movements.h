#include "data.h"

/* Add the number of months to a date */
tDate date_add(tDate date, unsigned int months);

/* Check if a date is a null date */
tBoolean date_null(tDate date);

/* Compare two dates */
int date_cmp(tDate d1, tDate d2);

/* Check if a date is between two other dates */
tBoolean date_between(tDate date, tDate startDate, tDate endDate);

/* Get all the movements generated by a movement */
void getGenMovements(tMovement movement, tDate startDate, tDate endDate, tMovementTable *result);

/* Get a textual representation of a movement */
void getMovementStr(tMovement movement, int maxSize, char *str);
	
/* Get a movement object from its textual representation */
tError getMovementObject(const char *str, tMovement *movement);

/* Initialize the table of movements */
void movTable_init(tMovementTable *table);

/* Load the table of movements from a file */
tError movTable_load(tMovementTable *table, const char* filename);

/* Save a table of movements to a file */
tError movTable_save(tMovementTable table, const char* filename);

/* Add a new movement to the table of movements */
tError movTable_add(tMovementTable *table, tMovement movement);

/* Remove the first occurence of a movement in the table */
void movTable_del(tMovementTable *table, tMovement movement);

/* Find movements between two dates */
void movTable_find(tMovementTable table, tDate startDate, tDate endDate, tMovementTable *result);

/* Find movements of a given concept */
void movTable_findByConcept(tMovementTable table, unsigned int conceptID, tMovementTable *result);

/* Compare two movements */
int movement_cmp(tMovement t1, tMovement t2);
	
/* Compare two tables of movements */
int movTable_cmp(tMovementTable t1, tMovementTable t2, tBoolean checkSorted);

/* Copy the movement data in src to dst*/
void movement_cpy(tMovement *dst, tMovement src);

/* Evaluate the total amount for a table of movements */
float getMovementsAmount(tMovementTable table);

